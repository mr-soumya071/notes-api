service: note-api

package:
  individually: true
  plugins:
    - serverless-bundle # Package our functions with Webpack
    - serverless-offline
    - serverless-dotenv-plugin # Load .env as environment variables
    - serverless-aws-alias

cors:
origin: "*"
headers:
  - Content-Type
  - X-Amz-Date
  - Authorization
  - X-Api-Key
  - X-Amz-Security-Token
  - X-Amz-User-Agent
allowCredentials: false

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}

provider:
  name: aws
  runtime: nodejs18.x
  stage: prod
  region: us-east-1

  environment:
    tableName: note

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  create:
    handler: create.main
    package:
      include:
        - node_modules/**
    events:
      - http:
          path: note
          method: post
          cors: true
          authorizer: aws_iam

  get:
    handler: get.main
    package:
      include:
        - node_modules/**
    events:
      - http:
          path: note/{id}
          method: get
          cors: true
          authorizer: aws_iam

  list:
    handler: list.main
    package:
      include:
        - node_modules/**
    events:
      - http:
          path: note
          method: get
          cors: true
          authorizer: aws_iam

  update:
    handler: update.main
    package:
      include:
        - node_modules/**
    events:
      - http:
          path: note/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete:
    handler: delete.main
    package:
      include:
        - node_modules/**
    events:
      - http:
          path: note/{id}
          method: delete
          cors: true
          authorizer: aws_iam
